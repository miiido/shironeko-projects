{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","ConwayGameOfLifeGame","props","state","grid","convertPrettyTemplateToObject","template","width","height","interval","isGameRunning","currentStep","stepsPerSecond","prettyTemplate","templateObject","y","length","row","x","push","ticked","this","setState","getIncrementedGrid","neighbourCount","isCellInRange","currentGrid","slice","nextGrid","getIncrementedCell","clearInterval","setInterval","incrementStep","e","target","value","createGrid","updateGameSpeedWhileRunning","className","onClick","handleSquareClick","toggleGame","updateBoardWidth","updateBoardHeight","updateGameSpeed","React","Component","ConwayGameOfLifeControls","name","type","min","max","onChange","ConwayGameOfLifeBoard","ConwayGameOfLifeSquare","key","squares","renderSquare","inlineStyle","style","App","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87162d27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass ConwayGameOfLifeGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const templateMap = {\n            'oscillating': [\n                ['x', 'x', ' ', ' '],\n                ['x', 'x', ' ', ' '],\n                [' ', ' ', 'x', 'x'],\n                [' ', ' ', 'x', 'x'],\n            ],\n        };\n\n        this.state = {\n            grid: this.convertPrettyTemplateToObject(templateMap[props.template]),\n            width: props.width,\n            height: props.height,\n            interval: null,\n            isGameRunning: false,\n            currentStep: 0,\n            stepsPerSecond: props.stepsPerSecond,\n            template: props.template,\n        };\n    }\n\n    /**\n     * Converts a pretty template (see constructor) into a more machine readable\n     * format.\n     */\n    convertPrettyTemplateToObject(prettyTemplate) {\n        let templateObject = [];\n\n        for (let y = 0; y < prettyTemplate.length; y++) {\n            let row = [];\n            for (let x = 0; x < prettyTemplate[y].length; x++) {\n                row.push({ticked: prettyTemplate[y][x] === 'x'});\n            }\n\n            templateObject.push(row);\n        }\n\n        return templateObject;\n    }\n\n    /**\n     * Creates a grid with no squares ticked.\n     * @param  {int} width  Grid width\n     * @param  {int} height Grid height\n     * @return {array[]}\n     */\n    createGrid(width, height) {\n        let grid = [];\n        for (let y = 0; y < height; y++) {\n            let row = [];\n            for (let x = 0; x < width; x++) {\n                row.push({ticked: false});\n            }\n\n            grid.push(row);\n        }\n\n        return grid;\n    }\n\n    /**\n     * Increments the grid to the next step.\n     * @return {void}\n     */\n    incrementStep() {\n        this.setState({\n            grid: this.getIncrementedGrid(this.state.grid),\n            currentStep: this.state.currentStep + 1,\n        });\n    }\n\n    /**\n     * Return true if the cell is in range of the board.\n     * @return {Boolean}\n     */\n    isCellInRange(x, y) {\n        return x >= 0\n            && x < this.state.width\n            && y >= 0\n            && y < this.state.height;\n    }\n\n    /**\n     * Get the ticked status of a cell for the next step.\n     * @param  {array[]} grid The grid of the current step\n     * @param  {int} x The x position of the cell\n     * @param  {int} y The y position of the cell\n     * @return {boolean} The ticked status for the next step\n     */\n    getIncrementedCell(grid, x, y) {\n        let neighbourCount = 0\n            + ((this.isCellInRange(x - 1, y - 1) && grid[y - 1][x - 1].ticked) ? 1 : 0)\n            + ((this.isCellInRange(x - 1, y)     && grid[y][x - 1].ticked)     ? 1 : 0)\n            + ((this.isCellInRange(x - 1, y + 1) && grid[y + 1][x - 1].ticked) ? 1 : 0)\n            + ((this.isCellInRange(x, y - 1)     && grid[y - 1][x].ticked)     ? 1 : 0)\n            + ((this.isCellInRange(x, y + 1)     && grid[y + 1][x].ticked)     ? 1 : 0)\n            + ((this.isCellInRange(x + 1, y - 1) && grid[y - 1][x + 1].ticked) ? 1 : 0)\n            + ((this.isCellInRange(x + 1, y)     && grid[y][x + 1].ticked)     ? 1 : 0)\n            + ((this.isCellInRange(x + 1, y + 1) && grid[y + 1][x + 1].ticked) ? 1 : 0);\n\n        // Any ticked cell with fewer than two ticked neighbours gets unticked.\n        // Any ticked cell with two or three ticked neighbours remains ticked.\n        // Any ticked cell with more than three ticked neighbours gets unticked.\n        if (grid[y][x].ticked) {\n            return neighbourCount === 2 || neighbourCount === 3;\n        } else {\n            // Any unticked cell with three neighbours will be ticked.\n            return neighbourCount === 3;\n        }\n    }\n\n    /**\n     * Provides the grid for the next step.\n     * @param  {array[]} grid The grid of the current step\n     * @return {array[]}      The grid of the next step\n     */\n    getIncrementedGrid(grid) {\n        const currentGrid = grid.slice();\n        // Note: Since JS doesn't have a native deep copy function, we'll create\n        // the next grid from a bare array.\n        let nextGrid = [];\n\n        for (let y = 0; y < this.state.height; y++) {\n            let row = [];\n            for (let x = 0; x < this.state.width; x++) {\n                row.push({ticked: this.getIncrementedCell(currentGrid, x, y)});\n            }\n\n            nextGrid.push(row);\n        }\n\n        return nextGrid;\n    }\n\n    /**\n     * Ticks or unticks a square.\n     */\n    handleSquareClick(x, y) {\n        // Note: this.state.grid is mutated since .slice() doesn't do a deep\n        // copy.\n        const grid = this.state.grid.slice();\n        grid[y][x].ticked = !grid[y][x].ticked;\n        this.setState({grid});\n    }\n\n    /**\n     * Toggles the game to run its steps automatically.\n     */\n    toggleGame() {\n        let interval = null;\n        if (this.state.isGameRunning) {\n            clearInterval(this.state.interval);\n        } else {\n            interval = setInterval(() => this.incrementStep(), 1000 / this.state.stepsPerSecond);\n        }\n\n        this.setState({\n            interval,\n            isGameRunning: !this.state.isGameRunning,\n        });\n    }\n\n    /**\n     * Does the logic of this.toggleGame() twice.\n     */\n    updateGameSpeedWhileRunning() {\n        if (!this.state.isGameRunning) {\n            return;\n        }\n\n        clearInterval(this.state.interval);\n        let interval = setInterval(() => this.incrementStep(), 1000 / this.state.stepsPerSecond);\n\n        this.setState({\n            interval,\n            isGameRunning: true,\n        });\n    }\n\n    /**\n     * Updates the board width but clears the grid.\n     */\n    updateBoardWidth(e) {\n        let width = e.target.value;\n        let grid = this.createGrid(width, this.state.height);\n        this.setState({\n            width,\n            grid,\n        });\n    }\n\n    /**\n     * Updates the board height but clears the grid.\n     */\n    updateBoardHeight(e) {\n        let height = e.target.value;\n        let grid = this.createGrid(this.state.width, height);\n        this.setState({\n            height,\n            grid,\n        });\n    }\n\n    /**\n     * Updates the game speed.\n     */\n    updateGameSpeed(e) {\n        this.setState({stepsPerSecond: e.target.value});\n\n        if (this.state.isGameRunning) {\n            this.updateGameSpeedWhileRunning();\n        }\n    }\n\n    render() {\n        const grid = this.state.grid.slice();\n\n        return (\n            <div className=\"conway-game-of-life-game\">\n                <ConwayGameOfLifeBoard\n                    grid={grid}\n                    width={this.state.width}\n                    height={this.state.height}\n                    onClick={(x, y) => this.handleSquareClick(x, y)}\n                />\n                <ConwayGameOfLifeControls\n                    width={this.state.width}\n                    height={this.state.height}\n                    toggleGame={() => this.toggleGame()}\n                    isGameRunning={this.state.isGameRunning}\n                    updateBoardWidth={(e) => this.updateBoardWidth(e)}\n                    updateBoardHeight={(e) => this.updateBoardHeight(e)}\n                    stepsPerSecond={this.state.stepsPerSecond}\n                    currentStep={this.state.currentStep}\n                    updateGameSpeed={(e) => this.updateGameSpeed(e)}\n                    incrementStep={() => this.incrementStep()}\n                />\n            </div>\n        );\n    }\n}\n\nclass ConwayGameOfLifeControls extends React.Component {\n    render() {\n        return (\n            <div className=\"conway-game-of-life-controls\">\n                <label>\n                    Width\n                    <input name=\"width\" type=\"number\" min=\"1\" max=\"100\"\n                        value={this.props.width}\n                        onChange={this.props.updateBoardWidth}\n                    />\n                </label>\n\n                <label>\n                    Height\n                    <input name=\"height\" type=\"number\" min=\"1\" max=\"100\"\n                        value={this.props.height}\n                        onChange={this.props.updateBoardHeight}\n                    />\n                </label>\n\n                <br />\n\n                <label>\n                    Game Speed (Steps per Second)\n                    <input name=\"height\" type=\"number\" min=\"3\" max=\"100\"\n                        value={this.props.stepsPerSecond}\n                        onChange={this.props.updateGameSpeed}\n                    />\n                </label>\n\n                <button\n                    onClick={this.props.toggleGame}\n                >\n                    {this.props.isGameRunning ? 'Stop' : 'Start'}\n                </button>\n\n                <br />\n\n                <label>Current Step</label>\n                {' '}\n                <span>{this.props.currentStep}</span>\n\n                <button\n                    onClick={this.props.incrementStep}\n                >\n                    Increment Step\n                </button>\n            </div>\n        );\n    }\n}\n\nclass ConwayGameOfLifeBoard extends React.Component {\n    renderSquare(x, y) {\n        return (\n            <ConwayGameOfLifeSquare\n                key={x + '-' + y}\n                ticked={this.props.grid[y][x].ticked}\n                onClick={() => this.props.onClick(x, y)}\n            />\n        );\n    }\n\n    render() {\n        let squares = [];\n        // Set the top leftmost square as coordinate (0, 0), so the first row\n        // should have the pattern (0, 0), (0, 1), etc.\n        for (let y = 0; y < this.props.height; y++) {\n            for (let x = 0; x < this.props.width; x++) {\n                squares.push(this.renderSquare(x, y));\n            }\n        }\n\n        let inlineStyle = {\n            width: (this.props.width * 20) + 'px',\n        };\n\n        return (\n            <div\n                className=\"conway-game-of-life-board\"\n                style={inlineStyle}\n            >\n                {squares}\n            </div>\n        );\n    }\n}\n\nfunction ConwayGameOfLifeSquare(props) {\n    let className = props.ticked\n        ? 'conway-game-of-life-square ticked'\n        : 'conway-game-of-life-square';\n\n    return (\n        <div\n            className={className}\n            onClick={props.onClick}\n        >\n        </div>\n    );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <div className=\"App-body\">\n          <h2>Conway's Game of Life</h2>\n          <p>\n              This is Conway's Game of Life created using React.js. For\n              more information on the game logic, refer to the Wikipedia page:\n              {' '}\n              <a\n                  className=\"App-link\"\n                  href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n              >\n                  here\n              </a>\n          </p>\n        <ConwayGameOfLifeGame width={4} height={4} stepsPerSecond={10} template={'oscillating'} />\n      </div>\n      <footer className=\"App-footer\">\n        Shironeko Projects 2020\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}